#include "experimental/rans_komg.f"
#define tSTATSTART uparam(1) /* start time for averaging */
#define tSTATFREQ  uparam(2) /* output frequency for statistics */

c data extraction along wall normal direction
#define INTP_NMAX 2000 /* number of sample points */
#define XCINT 1.0     /* x coordinate of 1D line*/
#define ZCINT 1.0     /* z coordinate of 1D line */

c mesh dimensions
#define BETAM 2.4     /* wall normal stretching parameter */
#define PI (4.*atan(1.))
#define XLEN (2.*PI)
#define ZLEN 0
#define NUMBER_ELEMENTS_X 3
#define NUMBER_ELEMENTS_Y 8
#define NUMBER_ELEMENTS_Z 1

c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine abssub2(a,b,n)
      REAL A(1),B(1)
C
      include 'OPCTR'
C
      DO 100 I=1,N
         A(I)=A(I)-abs(B(I))
 100  CONTINUE
      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_komg_mut,rans_komg_mutsk,rans_komg_mutso
      real mu_t,Pr_t

      e = gllel(eg)

      Pr_t=0.91
      mu_t=rans_komg_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
      elseif(ifield.eq.2) then
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then
        udiff = cpfld(ifield,1)+rans_komg_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        udiff = cpfld(ifield,1)+rans_komg_mutso(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      integer ix,iy,iz,e,eg

c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_komg_kSrc,rans_komg_omgSrc

      e = gllel(eg)

      if(ifield.eq.3) then
        qvol = rans_komg_kSrc(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_komg_omgSrc(ix,iy,iz,e)
      else
        qvol = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
C       implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real taunew(lx1,ly1,lz1,lelv)
      common /wallshear/ taunew
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
C       integer ix,iy,iz,iside,e,eg
      e = gllel(ieg)
    
C     U, TKE, and Omg are all zero on the wall 
      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

c     Imposing shear stress B.C.s
      if(cbc(iside,e,1).eq.'sh ') then
        TRX=taunew(ix,iy,iz,e)
        TRY=0.0
        TRZ=0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ix,iy,iz,e,eg
      real darcy,utau,sigm,kmax,omax,yplus,fact,Re

      e = gllel(eg)

      Re    = 1.0/param(2)
      darcy = 0.316/(Re**0.25)
      utau  = sqrt(darcy/8.0)
      sigm  = 0.6
      kmax  = 4.5*utau*utau
      omax  = 0.5*utau*utau*Re
      yplus = max(wd(ix,iy,iz,e)*utau*Re,1.0e-3)

C       print *, Re, darcy, utau, sigm, kmax, omax



      ux   = 3.0/2.0*(1.0-y*y)
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      fact = exp(-(log10(yplus)-1.0)**2/(2.0*sigm**2))
      if(ifield.eq.3) temp = kmax*fact
      if(ifield.eq.4) temp = omax*fact

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
C       implicit none
      include 'SIZE'
      include 'TOTAL'

      real x0(3)
      data x0 /0.0, 0.0, 0.0/ 
      save x0

      integer icalld
      save    icalld
      data    icalld /0/

      real atime,timel
      save atime,timel

      integer ntdump
      save    ntdump

      real    rwk(INTP_NMAX,ldim+1) ! r, s, t, dist2
      integer iwk(INTP_NMAX,3)      ! code, proc, el 
      save    rwk, iwk

      integer nint, intp_h
      save    nint, intp_h

      logical iffpts
      save iffpts

      real xint(INTP_NMAX),yint(INTP_NMAX),zint(INTP_NMAX)
      save xint, yint, zint
      save igs_x, igs_z

      parameter(nstat=9)
      real ravg(lx1*ly1*lz1*lelt,nstat)
      real stat(lx1*ly1*lz1*lelt,nstat)
      real stat_y(INTP_NMAX*nstat)
      save ravg, stat, stat_y

      save dragx_avg

      logical ifverbose
      common /gaaa/    wo1(lx1,ly1,lz1,lelv)
     &              ,  wo2(lx1,ly1,lz1,lelv)
     &              ,  wo3(lx1,ly1,lz1,lelv)

      integer flag(lelv)
      common /beflag/ flag

c----------------------------------------------------------------
c     VARIABLES DECLARED FOR USING THE NON-ITERATIVE METHOD  
      real tauold(lx1,ly1,lz1,lelv), taunew(lx1,ly1,lz1,lelv)
      common /wallshear/ taunew
      save tauold
      
      real M, Kappa, utau_init
      data M/5.17/, kappa/0.41/, utau_init/0.2/
      save M, kappa, utau_init
c----------------------------------------------------------------
c     VARIABLES DECLARED FOR USING THE ITERATIVE METHOD 
      real newton,secant,rtol,ut0,ut1,uti(lx1,ly1,lz1,lelv),utau
      integer flg, maxiter, count
      data rtol/1.0e-5/, maxiter/20000/
      data flg/2/, count/0/ !flg = flag for the chosen wall model
c      data uti/0.2/  !Initial guess value of utau for Newton Method
      data ut0/0.04/, ut1/0.08/ !Initial guess values for Secant Method
      save rtol, maxiter, flg, uti, ut0, ut1
c---------------------------------------------------------------

      real tplus
      real tmn, tmx   

      integer bIDs(1)
      save iobj_wall

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      real ypmin,ypmax,ypave,utmin,utmax,utave

      if (mod(istep,10).eq.0) then
        call print_limits !monitor the solution
        call y_p_limits(wd,ypmin,ypmax,ypave,utmin,utmax,utave)
        if(nio.eq.0) then
          write(6,256)'y_p+',ypmin,ypmax,ypave
          write(6,256)'u_tau',utmin,utmax,utave
          write(6,*)
        endif
      endif

 256  format(a15,3es13.4)

      n     = nx1*ny1*nz1*nelv
      nelx  = NUMBER_ELEMENTS_X
      nely  = NUMBER_ELEMENTS_Y
      nelz  = NUMBER_ELEMENTS_Z

      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall,bIDs,1)
         nm = iglsum(nmember(iobj_wall),1)
         if(nid.eq.0) write(6,*) 'obj_wall nmem:', nm 
         call prepost(.true.,'  ')
      endif

      ubar = glsc2(vx,bm1,n)/volvm1
      e2   = glsc3(vy,bm1,vy,n)+glsc3(vz,bm1,vz,n)
      e2   = e2/volvm1
      if (nfield.gt.1) then
        tmn  = glmin(t,n)
        tmx  = glmax(t,n)
      endif
      if(nid.eq.0) write(6,2) time,ubar,e2,tmn,tmx
   2               format(1p5e13.4,' monitor')

c     EQUILIBRIUM WALL STRESS MODEL...START

c     Currently all the lines for the non-iterative method are commented
c     For iterative method: up,yp = velocity,location of matching point
c     For non-iterative method: up,yp = uplus,yplus of matching point

      if (istep.eq.0) then
         do iel = 1, nelv
          do ix = 1, lx1
           do iy = 1, ly1
            do iz = 1, lz1
c              tauold(ix,iy,iz,iel) = param(1)*(utau_init)**2
               uti(ix,iy,iz,iel) = 0.08 ! Guess value for N-R solver
            enddo
           enddo
          enddo
         enddo
         do iel = 1, nelv
          do ix = 1, lx1
           do iy = 1, ly1
            do iz = 1, lz1
              taunew(ix,iy,iz,iel) = 0.0
            enddo
           enddo
          enddo
         enddo
      endif

      if (time.lt.0) then
         do iel = 1, nelv
          do ix = 1, lx1
           do iy = 1, ly1
            do iz = 1, lz1
              taunew(ix,iy,iz,iel) = 0.0
            enddo
           enddo
          enddo
         enddo

      else
      do iel = 1, nelv
        if (flag(iel) .eq. 1) then  ! boundary element is above y=0
            do ix = 1,lx1
              do iz = 1,lz1
                yp = 1-ym1(ix,1,iz,iel)
                up = vx(ix,1,iz,iel)
c                yp = yp*sqrt(tauold(ix,ly1,iz,iel)/param(1))
c     $               /(param(2)/param(1))
c                up = 8.3*yp**(1/7) ! Werner/Wengle
c                up = 1/kappa*log(1+kappa*yp) + 7.8*
c     $               (1 - exp(-yp/11) - yp/11*exp(-yp/3)) !Reichardt
c                up = (1/kappa)*log(yp) + M  ! classical log law
c               taunew(ix,ly1,iz,iel) = -param(1)*(vx(ix,1,iz,iel)/up)**2
      utau = newton(flg,up,yp,param(1),param(2),uti(ix,ly1,iz,iel),rtol,
     $              maxiter)
c      utau = secant(flg,up,yp,param(1),param(2),ut0,ut1,rtol,maxiter)
      if (utau .eq. 0.0) count = count + 1 ! count unconverged solutions
      if (utau .ne. 0.0) uti(ix,ly1,iz,iel) = utau ! update guess value
                                                   ! for next time step
               taunew(ix,ly1,iz,iel) = -param(1)*utau**2 ! shear stress
      if (utau .eq. 0.0) taunew(ix,ly1,iz,iel) = -param(1)
     $                                           *uti(ix,ly1,iz,iel)**2
C                     print *, iel, ix, iz, ym1(ix,1,iz,iel), yp,  
C      $                 vx(ix,1,iz,iel), uti(ix,ly1,iz,iel), 
C      $                 taunew(ix,ly1,iz,iel)
              enddo
            enddo

        else if (flag(iel) .eq. -1) then ! boundary element below y=0
            do ix = 1,lx1
              do iz = 1,lz1
                yp = 1+ym1(ix,ly1,iz,iel)
                up = vx(ix,ly1,iz,iel)
c                yp = yp*sqrt(tauold(ix,1,iz,iel)/param(1))
c     $               /(param(2)/param(1))
c                up = 8.3*yp**(1/7) ! Werner/Wengle
c                up = 1/kappa*log(1+kappa*yp) + 7.8*
c     $               (1 - exp(-yp/11) - yp/11*exp(-yp/3)) !Reichardt
c                up = (1/kappa)*log(yp) + M  ! classical log law
c               taunew(ix,1,iz,iel) = -param(1)*(vx(ix,ly1,iz,iel)/up)**2
      utau = newton(flg,up,yp,param(1),param(2),uti(ix,1,iz,iel),rtol,
     $              maxiter)
c      utau = secant(flg,up,yp,param(1),param(2),ut0,ut1,rtol,maxiter)
      if (utau .eq. 0.0) count = count +1 ! count unconverged solutions
      if (utau .ne. 0.0) uti(ix,1,iz,iel) = utau ! update guess value
                                                 ! for next time step
               taunew(ix,1,iz,iel) = -param(1)*utau**2 ! shear stress
      if (utau .eq. 0.0) taunew(ix,1,iz,iel) = -param(1)
     $                                         *uti(ix,1,iz,iel)**2

C                   print *, iel, ix, iz, ym1(ix,ly1,iz,iel), yp,  
C      $                 vx(ix,ly1,iz,iel), uti(ix,1,iz,iel), 
C      $                 taunew(ix,1,iz,iel)
              enddo
            enddo
        endif
      enddo

      count = iglsum(count,1)

      if(nid.eq.0) then
       write(6,*) 'Solutions not converged: ', count
      endif

      count = 0
      
      endif

c      do iel = 1, nelv
c       do ix = 1, lx1
c        do iy = 1, ly1
c         do iz = 1, lz1
c           tauold(ix,iy,iz,iel) = -taunew(ix,iy,iz,iel)
c         enddo
c        enddo
c       enddo
c      enddo

c     EQUILIBRIUM WALL STRESS MODEL...END


      if (time.lt.tSTATSTART) return


c     What follows computes some statistics ...
c

C       if(ifoutfld) then
C         if (ldimt.ge.2) call lambda2(t(1,1,1,1,2))
C         if (ldimt.ge.3) call comp_vort3(t(1,1,1,1,3),wo1,wo2,vx,vy,vz)
C       endif

      if(icalld.eq.0) then
        if(nid.eq.0) write(6,*) 'Start collecting statistics ...'

        nxm = 1 ! mesh is linear
        call interp_setup(intp_h,0.0,nxm,nelt)
        nint = 0
        if (nid.eq.0) then
          nint = INTP_NMAX
          call cfill(xint,XCINT,size(xint))
          do i = 1,INTP_NMAX 
             yi = (i-1.)/(INTP_NMAX-1)
             yint(i) = tanh(BETAM*(2*yi-1))/tanh(BETAM)
          enddo
          call cfill(zint,ZCINT,size(zint))
        endif
        iffpts = .true. ! dummy call to find points
        call interp_nfld(stat_y,ravg,1,xint,yint,zint,nint,
     $                   iwk,rwk,INTP_NMAX,iffpts,intp_h)
        iffpts = .false.
        call gtpp_gs_setup(igs_x,nelx     ,nely,nelz,1) ! x-avg
        if (ldim == 3) then
          call gtpp_gs_setup(igs_z,nelx*nely,1   ,nelz,3) ! z-avg
        endif

        call rzero(ravg,size(ravg))
        dragx_avg = 0
        atime     = 0
        timel     = time
        ntdump    = int(time/tSTATFREQ)

        icalld = 1
      endif

      dtime = time - timel
      atime = atime + dtime

      ! averaging over time
      if (atime.ne.0. .and. dtime.ne.0.) then
        beta      = dtime / atime
        alpha     = 1. - beta

        ifverbose = .false.
        call avg1(ravg(1,1),vx   ,alpha,beta,n,'uavg',ifverbose)
        call avg2(ravg(1,2),vx   ,alpha,beta,n,'urms',ifverbose)
        call avg2(ravg(1,3),vy   ,alpha,beta,n,'vrms',ifverbose)
        call avg2(ravg(1,4),vz   ,alpha,beta,n,'wrms',ifverbose)
        call avg3(ravg(1,5),vx,vy,alpha,beta,n,'uvmm',ifverbose)

C         call avg1(ravg(1,6),t    ,alpha,beta,n,'tavg',ifverbose)
C         call avg2(ravg(1,7),t    ,alpha,beta,n,'trms',ifverbose)
C         call avg3(ravg(1,8),vx,t ,alpha,beta,n,'utmm',ifverbose)
C         call avg3(ravg(1,9),vy,t ,alpha,beta,n,'vtmm',ifverbose)

        call torque_calc(1.0,x0,.false.,.false.) ! compute wall shear
        dragx_avg = alpha*dragx_avg + beta*dragx(iobj_wall)
c        write(6,*) 'dragx(iobj_wall) = ', dragx(iobj_wall)
      endif
      
c      write(6,*) 'dragx_avg = ', dragx_avg

      timel = time

      ! write statistics to file
      if(istep.gt.0 .and. time.gt.(ntdump+1)*tSTATFREQ) then
         ! averaging over statistical homogeneous directions (x-z)
         do i = 1,nstat
            call planar_avg(wo1      ,ravg(1,i),igs_x)
            call planar_avg(stat(1,i),wo1      ,igs_z)
         enddo

         if (nfield.gt.1) then
            ! evaluate d<T>/dy at the lower wall
C             call opgrad(wo1,wo2,wo3,stat(1,6))
C             call dssum(wo2,lx1,ly1,lz1)
C             call col2(wo2,binvm1,n)
C             call interp_nfld(stat_y,wo2,1,xint,yint,zint,nint,
C      $                       iwk,rwk,INTP_NMAX,iffpts,intp_h)
C             dTdy_w = stat_y(1)
         else
            dTdy_w = 1.
         endif

         ! extract data along wall normal direction (1D profile)
         call interp_nfld(stat_y,stat,nstat,xint,yint,zint,nint,
     $                    iwk,rwk,INTP_NMAX,iffpts,intp_h)

         ntdump = ntdump + 1
         if (nid.ne.0) goto 998 

         rho    = param(1)
         dnu    = param(2)
         A_w    = 2 * XLEN 
         if (ldim .eq. 3) then
           A_w = A_w* ZLEN
         endif
         tw     = dragx_avg / A_w
         u_tau  = sqrt(tw / rho)
         qw     = -param(8) * dTdy_w
         t_tau  = 1/u_tau * qw
         Re_tau = u_tau / dnu
         tplus  = time * u_tau**2 / dnu

         write(6,*) 'Dumping statistics ...', Re_tau, u_tau, dragx_avg
 
         open(unit=56,file='vel_fluc_prof.dat')
         write(56,'(A,1pe14.7)') '%time = ', time
         write(56,'(A)') 
     $    '%  y    y+    uu    vv    ww    uv'

         open(unit=57,file='mean_prof.dat')
         write(57,'(A,1pe14.7)') '%time = ', time, '%ut = ', u_tau, 
     $   '%tw = ', tw 
         write(57,'(A)') 
     $    '%  y    y+    Umean     U+mean'

         do i = 1,nint
            yy = 1+yint(i)
            write(56,3) 
     &           yy,
     &           yy*Re_tau,
     &           (stat_y(1*nint+i)-(stat_y(0*nint+i))**2)/u_tau**2,
     &           stat_y(2*nint+i)/u_tau**2,
     &           stat_y(3*nint+i)/u_tau**2,
     &           stat_y(4*nint+i)/u_tau**2
C      &           (stat_y(6*nint+i)-(stat_y(5*nint+i))**2)/t_tau**2,
C      &           stat_y(7*nint+i)/qw,
C      &           -stat_y(8*nint+i)/qw

            write(57,3) 
     &           yy,
     &           yy*Re_tau, 
     &           stat_y(0*nint+i)/u_tau,
     &           stat_y(0*nint+i)
C      &           stat_y(5*nint+i)/t_tau

  3         format(1p15e17.9)
         enddo
         close(56)
         close(57)

 998  endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat ()   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)
c      param(84) = 1e-6    ! setting initial time step

      n = nelv * 8 !2**ldim
      xmin = glmin(xc,n)
      xmax = glmax(xc,n)
      ymin = glmin(yc,n)
      ymax = glmax(yc,n)
      zmin = glmin(zc,n)
      zmax = glmax(zc,n)

      xscale = XLEN/(xmax-xmin)
      yscale = 1./(ymax-ymin)
      zscale = ZLEN/(zmax-zmin)

      do i=1,n
         xc(i,1) = xscale*xc(i,1)
         yc(i,1) = 2*yscale*yc(i,1)-1.  ! No stretching 
         !yc(i,1) = tanh(BETAM*(2*yscale*yc(i,1)-1))/tanh(BETAM) ! Stretching
        if (ldim == 3) then
         zc(i,1) = zscale*zc(i,1)
        endif
      enddo
C       do i=1,n
C          xc(i,1) = xscale*xc(i,1)
C          yc(i,1) = 2*yscale*yc(i,1)-1  ! No stretching 
C          !yc(i,1) = tanh(BETAM*(2*yscale*yc(i,1)-1))/tanh(BETAM) ! Stretching
C         if (ldim == 3) then
C          zc(i,1) = zscale*zc(i,1)
C         endif
C       enddo

c     calculate wall distance for regularized k-omega
C       call rone(wd,n)
C       call abssub2(wd,ym1,n)
 
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2 () ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      
      integer flag(lelv), counterp, countern
      common /beflag/ flag
      
      counterp = 0
      countern = 0

      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'sh ') boundaryID(ifc,iel) = 1 
         cbc(ifc,iel,2) = cbc(ifc,iel,1) 
         if (cbc(ifc,iel,1) .eq. 'sh ') cbc(ifc,iel,2) = 't  '
      enddo
      enddo

      ! Flag boundary elements above and below centerline (y = 0)
      do iel=1,nelv
         do ifc=1,2*ldim
           if ((cbc(ifc,iel,1).eq.'sh ').AND.(ym1(1,1,1,iel).gt.0)) then
              flag(iel) = 1
              counterp = counterp+1
           else if ((cbc(ifc,iel,1).eq.'sh ').AND.
     $             (ym1(1,1,1,iel).lt.0)) then
              flag(iel) = -1
              countern = countern+1
           endif
         enddo
      enddo

      counterp = iglsum(counterp,1)
      countern = iglsum(countern,1)

      if (nid.eq.0) then 
          write(6,*) '# Boundary Elements Above Centerline:', counterp
          write(6,*) '# Boundary Elements Below Centerline:', countern
      endif

      param(54) = -1  ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z) 
      param(55) = 1.0 ! flowrate/bulk-velocity   

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3 ()
C       implicit none
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ifld_k,ifld_omg,m_id,w_id
      real coeffs(21) !array for passing your own coeffs
      logical ifcoeffs
      integer n

      n=nx1*ny1*nz1*nelv
c     calculate wall distance for regularized k-omega
      call rone(wd,n)
      call abssub2(wd,ym1,n)
      

      ifld_k = 3 !address of tke equation in t array
      ifld_omg = 4 !address of omega equation in t array
      ifcoeffs=.false. !set to true to pass your own coeffs

C     Supported models:
c     m_id = 0 !regularized high-Re k-omega (no wall functions)
      m_id = 1 !regularized low-Re k-omega
c     m_id = 2 !regularized high-Re k-omega SST (no wall functions)
c     m_id = 3 !regularized low-Re k-omega SST

C     Wall distance function:
      w_id = 0 ! user specified
c     w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
c     w_id = 2 ! distf (coordinate difference, provides smoother function)

      call rans_komg_init(ifld_k,ifld_omg,ifcoeffs,coeffs,w_id,wd,m_id)

      return
      end
C c-----------------------------------------------------------------------
C       subroutine usrdat()   ! This routine to modify element vertices
C       implicit none
C       include 'SIZE'
C       include 'TOTAL'

C C     enforce constant average velocity
C       param(54) = -1
C       param(55) = 1.0

C       return
C       end
C c-----------------------------------------------------------------------
C       subroutine usrdat2()  ! This routine to modify mesh coordinates
C       implicit none
C       include 'SIZE'
C       include 'TOTAL'

C       real wd
C       common /walldist/ wd(lx1,ly1,lz1,lelv)

C       integer i,n
C       real xmin,xmax,ymin,ymax,scaley,scalex
C       real glmin,glmax

C       n=nx1*ny1*nz1*nelv

C       xmin=glmin(xm1,n)
C       xmax=glmax(xm1,n)
C       ymin=glmin(ym1,n)
C       ymax=glmax(ym1,n)

C       scalex=3.0/8.0/(xmax-xmin) !make the elements square on average
C       scaley=1.0/(ymax-ymin)

C       call cmult(xm1,scalex,n)
C       call cmult(ym1,scaley,n)

C c     calculate wall distance for regularized k-omega
C       call rone(wd,n)
C       call sub2(wd,ym1,n)

C       return
C       end
C c-----------------------------------------------------------------------
C       subroutine usrdat3()
C       implicit none
C       include 'SIZE'
C       include 'TOTAL'

C       real wd
C       common /walldist/ wd(lx1,ly1,lz1,lelv)

C       integer ifld_k,ifld_omg,m_id,w_id
C       real coeffs(21) !array for passing your own coeffs
C       logical ifcoeffs
      
C       ifld_k = 3 !address of tke equation in t array
C       ifld_omg = 4 !address of omega equation in t array
C       ifcoeffs=.false. !set to true to pass your own coeffs

C C     Supported models:
C c     m_id = 0 !regularized high-Re k-omega (no wall functions)
C       m_id = 1 !regularized low-Re k-omega
C c     m_id = 2 !regularized high-Re k-omega SST (no wall functions)
C c     m_id = 3 !regularized low-Re k-omega SST

C C     Wall distance function:
C       w_id = 0 ! user specified
C c     w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
C c     w_id = 2 ! distf (coordinate difference, provides smoother function)

C       call rans_komg_init(ifld_k,ifld_omg,ifcoeffs,coeffs,w_id,wd,m_id)

C       return
C       end
C-----------------------------------------------------------------------
      subroutine get_limits(phi,phimin,phimax,phiave,dphi,phip,rmsphi,n)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer i,n,ntot,iglsum
      real phi(1),phip(1),phimin,phimax,phiave,dphi,rmsphi
      real glmin,glmax,glsc2,glsum

      ntot=iglsum(n,1)

      rmsphi=0.0
      dphi=0.0
      if(istep.ge.1) then
        do i=1,n
          dphi=max(dphi,abs(phip(i)-phi(i)))
          rmsphi=rmsphi+(phip(i)-phi(i))**2
        enddo
        rmsphi=glsum(rmsphi,1)
        rmsphi=sqrt(rmsphi/DBLE(ntot))/dt
      endif
      dphi=glmax(dphi,1)
      dphi=dphi/dt

      phimin=glmin(phi,n)
      phimax=glmax(phi,n)
      phiave=glsc2(phi,bm1,n)/volvm1

      return
      end
C-----------------------------------------------------------------------
      subroutine get_limits_nodt(phi,phimin,phimax,phiave)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer n
      real phi(1),phimin,phimax,phiave
      real glmin,glmax,glsc2

      n=nx1*ny1*nz1*nelv

      phimin=glmin(phi,n)
      phimax=glmax(phi,n)
      phiave=glsc2(phi,bm1,n)/volvm1

      return
      end
c-----------------------------------------------------------------------
      subroutine y_p_limits(wd,ypmin,ypmax,ypave,utmin,utmax,utave)
      implicit none
      include 'SIZE'
      include 'TOTAL'

C     calculate min, max, and average y_p+ and u_tau values

      integer e,i,i0,i1,j,j0,j1,k,k0,k1,iw,jw,kw,i2,j2
      integer ipt,wpt,estrd,isd,jsd
      real msk(lx1,ly1,lz1,lelv)
      real gradu(lx1*ly1*lz1,3,3),wd(1)
      real tau(3),norm(3),vsca,tauw,utau,rho,mu
      real ypmin,ypmax,yp,ypave,vol,utmin,utmax,utave
      real glmin,glmax,glsum
      logical ifgrad, ifdid

      data ifdid /.false./
      save ifdid, msk

      ypmin=1.0d30
      ypmax=-1.0d30
      ypave=0.0
      utmin=1.0d30
      utmax=-1.0d30
      utave=0.0
      vol=0.0

C     first build the mask
      if(.not.ifdid)then
        ifdid=.true.
        call rone(msk,nx1*ny1*nz1*nelv)
        do e=1,nelv
          do isd=1,2*ndim
            if((cbc(isd,e,1).eq.'W  ') .or. (cbc(isd,e,1).eq.'sh '))then
              call backpts(i0,i1,j0,j1,k0,k1,isd)
              do k=k0,k1
              do j=j0,j1
              do i=i0,i1
                msk(i,j,k,e)=0.0
              enddo
              enddo
              enddo
            endif
          enddo
          do isd=1,2*ndim
            if((cbc(isd,e,1).eq.'W  ') .or. (cbc(isd,e,1).eq.'sh '))then
              call facind(i0,i1,j0,j1,k0,k1,lx1,ly1,lz1,isd)
              do k=k0,k1
              do j=j0,j1
              do i=i0,i1
                msk(i,j,k,e)=1.0
              enddo
              enddo
              enddo
            endif
          enddo
        enddo
        call dssum(msk,nx1,ny1,nz1) !for elements with edges but not faces along a wall
      endif

      do e=1,nelv
        ifgrad=.true.
        do isd=1,2*ndim
          if((cbc(isd,e,1).eq.'W  ') .or. (cbc(isd,e,1).eq.'sh '))then
            estrd=(e-1)*nx1*ny1*nz1
            if(ifgrad)then
              call gradm11(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),vx,e)
              call gradm11(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),vy,e)
              if(if3d)
     &         call gradm11(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),vz,e)
              ifgrad=.false.
            endif
            call backpts(i0,i1,j0,j1,k0,k1,isd)
            do k=k0,k1
            do j=j0,j1
            do i=i0,i1
              if(msk(i,j,k,e).lt.0.5) then
                iw=i
                jw=j
                kw=k
                if    (isd.eq.1) then
                  jw=1
                elseif(isd.eq.2) then
                  iw=nx1
                elseif(isd.eq.3) then
                  jw=ny1
                elseif(isd.eq.4) then
                  iw=1
                elseif(isd.eq.5) then
                  kw=1
                else
                  kw=nx1
                endif
                call getSnormal(norm,iw,jw,kw,isd,e)
                ipt=i +(j -1)*nx1+(k -1)*nx1*ny1
                wpt=iw+(jw-1)*nx1+(kw-1)*nx1*ny1

                mu=vdiff(iw,jw,kw,e,1)
                rho=vtrans(iw,jw,kw,e,1)

                do i2=1,ldim
                tau(i2)=0.0
                  do j2=1,ldim
                    tau(i2)=tau(i2)+
     &                   mu*(gradu(wpt,i2,j2)+gradu(wpt,j2,i2))*norm(j2)
                  enddo
                enddo

                vsca=0.0
                do i2=1,ldim
                  vsca=vsca+tau(i2)*norm(i2)
                enddo

                tauw=0.0
                do i2=1,ldim
                  tauw=tauw+(tau(i2)-vsca*norm(i2))**2
                enddo
                tauw=sqrt(tauw)
                utau=sqrt(tauw/rho)
                yp=wd(ipt+estrd)*utau*rho/mu
                ypmin=min(ypmin,yp)
                ypmax=max(ypmax,yp)
                ypave=ypave+yp*bm1(i,j,k,e)
                utmin=min(utau,utmin)
                utmax=max(utau,utmax)
                utave=utave+utau*bm1(i,j,k,e)
                vol=vol+bm1(i,j,k,e)
              endif
            enddo
            enddo
            enddo
          endif
        enddo
      enddo

      ypmin=glmin(ypmin,1)
      ypmax=glmax(ypmax,1)
      ypave=glsum(ypave,1)
      utmin=glmin(utmin,1)
      utmax=glmax(utmax,1)
      utave=glsum(utave,1)
      vol=glsum(vol,1)
      ypave=ypave/vol
      utave=utave/vol

      return
      end
c-----------------------------------------------------------------------
      subroutine backpts(i0,i1,j0,j1,k0,k1,isd)
      implicit none
      include 'SIZE'

      integer i0,i1,j0,j1,k0,k1,isd

      i0=1
      j0=1
      k0=1
      i1=nx1
      j1=ny1
      k1=nz1
      if(isd.eq.1) then
        j0=2
        j1=2
      elseif(isd.eq.2) then
        i0=nx1-1
        i1=nx1-1
      elseif(isd.eq.3) then
        j0=ny1-1
        j1=ny1-1
      elseif(isd.eq.4) then
        i0=2
        i1=2
      elseif(isd.eq.5) then
        k0=2
        k1=2
      elseif(isd.eq.6) then
        k0=nz1-1
        k1=nz1-1
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine print_limits
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real vol,glsum,glmin,glmax,glsc2
      real tmp(lx1*ly1*lz1*lelv)
      integer i,n1,n2,nt

      real uxmin,uxmax,uxave,uymin,uymax,uyave,uzmin,uzmax,uzave
      real prmin,prmax,prave
      real thmin(ldimt),thmax(ldimt),thave(ldimt)
      real rmsux,rmsuy,rmsuz,rmspr,rmsth(ldimt)
      real dux,duy,duz,dpr,dth(ldimt)
      character*15 tname

      n1=nx1*ny1*nz1*nelv
      n2=nx2*ny2*nz2*nelv
      nt=nx1*ny1*nz1*nelt

      call get_limits(vx,uxmin,uxmax,uxave,dux,vxlag,rmsux,n1)
      call get_limits(vy,uymin,uymax,uyave,duy,vylag,rmsuy,n1)
      if(if3d) call get_limits(vz,uzmin,uzmax,uzave,duz,vzlag,rmsuz,n1)
      call get_limits(pr,prmin,prmax,prave,dpr,prlag,rmspr,n2)
      if(ifheat)then
        do i=1,npscal+1
          if(idpss(i).eq.0) call get_limits(t(1,1,1,1,i),thmin(i) !Helmholtz solver
     &          ,thmax(i),thave(i),dth(i),tlag(1,1,1,1,1,i),rmsth(i),nt)
          if(idpss(i).eq.1) call get_limits_nodt(t(1,1,1,1,i) !CVODE solver
     &                      ,thmin(i),thmax(i),thave(i))
        enddo
      endif

      if(nio.eq.0) then
        write(*,*)
        write(*,254) 'limits','min','max','ave','max d/dt','rms d/dt'
        write(*,255) 'u velocity',uxmin,uxmax,uxave,dux,rmsux
        write(*,255) 'v velocity',uymin,uymax,uyave,duy,rmsuy
        if(if3d) write(*,255) 'w velocity',uzmin,uzmax,uzave,duz,rmsuz
        write(*,255) 'pressure',prmin,prmax,prave,dpr,rmspr
        if(ifheat) then
          do i=1,npscal+1
            if(i.eq.1) write(tname,'(a15)') "temperature"
            if(i.gt.1) write(tname,'(a14,i1)') "PS ",i-1
            if(idpss(i).eq.0)write(*,255)
     &               tname,thmin(i),thmax(i),thave(i),dth(i),rmsth(i)
            if(idpss(i).eq.1)write(*,256)
     &               tname,thmin(i),thmax(i),thave(i),'--','--'
          enddo
        endif
        write(*,*)
      endif

 254  format(a15,5a13)
 255  format(a15,5es13.4)
 256  format(a15,3es13.4,2a13)

      return
      end
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
c     WALL FUNCTIONS DEFINED HERE 
      real function f(x,flag,up,yp,rho,mu)
      real x,up,yp,rho,mu   !yp,up,rho,and mu are the location,velocity
                            !,density and dyn.viscosity for the matching 
                            !point; x is the unknown (utau at the wall)
      integer flag

      if (flag .eq. 1) then
        f = up/x-(1/0.41)*log(yp*rho*x/mu)-5.17 ! Classical Log Law
      else if (flag .eq. 2) then
        f = up/x-(1/0.41)*log(1+0.41*yp*rho*x/mu)-7.8*
     $      (1-exp(-yp*rho*x/(11*mu))-
     $      yp*rho*x/(11*mu)*exp(-yp*rho*x/(3*mu))) ! Reichardt
      endif

      return
      end
c----------------------------------------------------------------------
c     WALL FUNCTION DERIVATIVES DEFINED HERE (used in N-R solver)
      real function fprime(x,flag,up,yp,rho,mu)
      real x,up,yp,rho,mu   !yp,up,rho,and mu are the location,velocity
                            !,density and dyn.viscosity for the matching
                            !point; x is the unknown (utau at the wall)
      integer flag

      if (flag .eq. 1) then
        fprime = -up/x**2-1/(0.41*x) ! Classical Log Law
      else if (flag .eq. 2) then
        fprime = -up/x**2-yp*rho/(mu*(1+0.41*yp*rho*x/mu))-7.8*
     $     (yp*rho/(11*mu)*exp(-yp*rho*x/(11*mu))-
     $      yp*rho/(11*mu)*exp(-yp*rho*x/(3*mu))+x/33*(yp*rho/mu)**2*
     $     exp(-yp*rho*x/(3*mu))) ! Reichardt
      endif

      return
      end
c----------------------------------------------------------------------
c     NEWTON-RAPHSON SOLVER     
      real function newton(flag,up,yp,rho,mu,xi,rtol,maxiter)  
      implicit none
      integer flag,maxiter,i
      real up,yp,rho,mu,xi,rtol,eps,x,fx,fx1,fx2,xnew,fprime,f,fpr,fnew
      real atol 

      eps = 1.0e-14
      atol = 1.0e-14 
      newton = 0.0 ! assigned if the solution does not converge 
      x = xi
      fx = f(x,flag,up,yp,rho,mu)
      do i = 1,max(1,maxiter)
c        fx=f(x,flag,up,yp,rho,mu)
        fx1=f(x-eps,flag,up,yp,rho,mu)
        fx2=f(x+eps,flag,up,yp,rho,mu)
        fpr=(fx2-fx1)/(2*eps) ! calculate numerical derivative
c        fpr=fprime(x,flag,up,yp,rho,mu)!calculate analytical derivative
        xnew=x-fx/fpr
        fnew=f(xnew,flag,up,yp,rho,mu)
        if(abs((xnew-x)/xnew).le.rtol .AND. abs(fnew).le.atol) then
c        if(abs((xnew-x)/xnew).le.rtol) then
c        if(abs(fnew).le.atol) then
          newton=xnew
          exit
        endif
        x=xnew
        fx=fnew
      enddo
      
c      write(6,*) 'i, newton, xnew, f = ', i, newton, xnew,
c     $ f(newton,flag,up,yp,rho,mu)      

      return
      end
c---------------------------------------------------------------------
c     SECANT SOLVER 
      real function secant(flag,up,yp,rho,mu,xi1,xi2,rtol,maxiter)
      implicit none
      integer flag,maxiter,i
      real up,yp,rho,mu,xi1,xi2,rtol,x,fx,xprev,fxprev,xnew,f

      secant = 0.0  ! assigned if the solution does not converge
      x = xi2
      xprev = xi1
      fxprev=f(xprev,flag,up,yp,rho,mu)
      do i = 1,max(1,maxiter)
        fx=f(x,flag,up,yp,rho,mu)
        xnew=x-fx*(xprev-x)/(fxprev-fx)
        if(abs((xnew-x)/xnew).le.rtol) then
          secant=xnew
          exit
        endif
        fxprev=fx
        xprev=x
        x=xnew
      enddo

c      write(6,*) 'i, secant, f = ', i, secant, 
c     $ f(secant,flag,up,yp,rho,mu)

      return
      end
